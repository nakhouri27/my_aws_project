ISTIO: It is a servicemesh tool which is used to resolve issues faced by microservices.
Microservices face many challenges like:
i)	No encryption
ii)	No load balancing
iii)	Routing decision
iv)	Access control to services
v)	No failover/auto retries
vi)	Load metrics/logs
To solve this problem we have ISTIO
It provides several capabilities for traffic monitoring, access control, discovery security, resiliency & other useful things to a bundle of services. 
It deployed for micro services without any change of code.
To make this possible istio deploys an istio proxy (called an istio sidecar) next to each service.
All the traffic will be directed towards proxy which uses policy to decide how, when or whether that traffic should be deployed to the service.
Service mesh : we have multiple services so for single unit we call it as service mesh
How istio works withs container & kubernettes
ISTIOS uses a sidecar container implementation feature & function required mainly for microservices.

Configuration
Setup process for ISTIOS
1. curl -L https://istio.io/downloadIstio | sh -
2. cd istio-1.17.1
3. export PATH=$PWD/bin:$PATH
4. istioctl install --set profile=demo -y
5. kubectl label namespace default istio-injection=enabled
6. kubectl apply -f samples/bookinfo/platform/kube/bookinfo.yaml
7. kubectl get services
8. kubectl get pods
9. kubectl exec "$(kubectl get pod -l app=ratings -o jsonpath='{.items[0].metadata.name}')" -c ratings -- curl -sS productpage:9080/productpage | grep -o "<title>.*</title>"
10. kubectl apply -f samples/bookinfo/networking/bookinfo-gateway.yaml
11. istioctl analyze
minikube tunnel
export INGRESS_HOST=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
export INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="http2")].port}')
export SECURE_INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="https")].port}')
echo "$INGRESS_HOST"
echo "$INGRESS_PORT"
echo "$SECURE_INGRESS_PORT"
export GATEWAY_URL=$INGRESS_HOST:$INGRESS_PORT
echo "$GATEWAY_URL"
echo "http://$GATEWAY_URL/productpage"
kubectl apply -f samples/addons
kubectl rollout status deployment/kiali -n istio-system
istioctl dashboard kiali
for i in $(seq 1 100); do curl -s -o /dev/null "http://$GATEWAY_URL/productpage"; done

If facing error : minikube start

kubectl get pod -n istio-system
kubectl get svc -n istio-system
kubectl port-forward svc/kiali -n istio-system 20001


